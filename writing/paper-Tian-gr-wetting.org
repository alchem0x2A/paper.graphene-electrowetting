#+LATEX_CLASS: achemso
#+LATEX_CLASS_OPTIONS: [journal=ancac3,manuscript=article,email=true]
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \usepackage{fontspec}
#+DESCRIPTION:
#+KEYWORDS:
#+OPTIONS: tex:t toc:nil todo:t author:nil date:nil title:nil ^:t tags:nil
#+DESCRIPTION:

#+TITLE: Wettability of Doped Two-Dimensional Materials

#+LATEX_HEADER: \author{Tian Tian} 
#+LATEX_HEADER:  \affiliation{Institute for Chemical and Bioengineering, ETH Z{\"{u}}rich,  Vladimir Prelog Weg 1, CH-8093 Z{\"{u}}rich, Switzerland}

#+LATEX_HEADER: \author{Elton J. G. Santos}
#+LATEX_HEADER:  \affiliation{School of Mathematics and Physics, Queen's University Belfast, United Kingdom}
#+LATEX_HEADER:  \affiliation{School of Chemistry and Chemical Engineering, Queen's University Belfast, United Kingdom}

#+LATEX_HEADER:  \author{Shangchao Lin}
#+LATEX_HEADER:  \email{slin@eng.fsu.edu.}
#+LATEX_HEADER:  \affiliation{Department of Mechanical Engineering, Materials Science and Engineering Program, FAMU-FSU College of Engineering, Florida State University, Tallahassee, Florida 32310, United States}
#+LATEX_HEADER: \author{Chih-Jen Shih}
#+LATEX_HEADER:  \email{chih-jen.shih@chem.ethz.ch}
#+LATEX_HEADER:  \affiliation{Institute for Chemical and Bioengineering, ETH Z{\"{u}}rich,  Vladimir Prelog Weg 1, CH-8093 Z{\"{u}}rich, Switzerland}

#+NAME: abstract
#+BEGIN_EXPORT latex
\newpage{}
\begin{abstract}
  Understanding molecular interactions between liquid and the doped two-dimensional (2D) 
  materials enables new technology opportunities in functional surfaces and ultrathin membranes. 
  Here, we develop the first theoretical framework to model the wettability of the doped two-dimensional 
  (2D) materials as a function of their doping level. Multiscale physical phenomena are considered, 
  including: (i) the change of 2D materials surface energy, 
  (ii) the molecular reorientation of liquid molecules adjacent to the interface, 
  and (iii) the electrical double layer (EDL) formed in the liquid phase. 
  \textcolor{cyan}{We propose that the EDL effect dominates the contact angle change }
  and show that upon doping, the decrease of the equilibrium water contact angle on a sheet of defect-free, 
  monolayer 2D material is typically less than 7 degrees. 
  We then study the role of the surface defects and the influence of 2D material choice.
  \textcolor{cyan}{Our analysis show that the defect density plays a crucial role in the water contact angle on the doped
  2D materials, and is responsible for the discrepancy between the recent experimental observations and our proposed 
  theory. Based on the quantum capacitances (QCs) of various 2D materials calculated by density functional theory (DFT),
  we predict that when the the 2D material is doped by electrostatic gating, 
  the contact angle change on 2D semiconductors (e.g. transition metal dichalcogenides (TMDCs)) is more
  sensitive to the gate voltage compared to that on 2D semimetals (e.g. graphene). 
  Selecting a 2D material with a higher QC essentially reduces the gate voltage required to reach the same doping level,
  and ensures a wider operational region in 2D-material-based liquid phase devices.}
  \textcolor{magenta}{
  FINAL CONCLUSIONS PLACE HOLDER.
  }
  
\end{abstract}
\maketitle
#+END_EXPORT

#+NAME: fun-read-xvg
#+BEGIN_SRC python :exports none :tangle fun_read_xvg.py
  def read_xvg_energy(filename):
      data = {}
      with open(filename) as f:
          s_tmp = ""
          s = f.readline()
          while s.startswith("-") is not True:
              s_tmp = s
              s = f.readline()
          attrs = s_tmp.strip().split()  # Attributes of columns
          s = f.readline()
          while len(s) > 0:
              # print(s)
              name = ""
              i = 0
              s = s.split()
              while not s[i][0].isdecimal() and not s[i][0] == "-":
                  name += s[i]
                  i += 1
              d_dic = {}
              for att in attrs[1:]:
                  d_dic[att] = float(s[i])
                  i += 1
              d_dic["Unit"] = s[-1]
              data[name] = d_dic
              s = f.readline()
      return data

#+END_SRC

* Introduction

** The importance of understating the 2D-liquid interaction         :ignore:

Two-dimensional (2D) materials, the crystalline films with a thickness
of one atom or one molecule, combine optical transparency and the
quantum-confined properties.
*************** TODO [cite some review papers]. 
*************** END
Recent progress in the scalable production of large-area 2D materials
*************** TODO cite review papers
*************** END
has paved the way for the applications of functional surfaces and
ultrathin membranes.
*************** TODO cite review papers
*************** END

** Current state of 2D-liquid research                              :ignore:

The realization of these technologies essentially requires precise
control over the interactions between liquid and the ultrathin
materials, which motivates fundamental research of their
wettability. An accurate determination of the interfacial tension,
nevertheless, remains highly disputed
cite:taherian2013what,Kozbial_2015,Parobek_2015,Govind_Rajan_2016. Early
literature on understanding the surface science of 2D materials has
highlighted the effects of the airborne contaminants
cite:li_effect_2013,Xu_2013_withwhat,kozbial_study_2014,Kozbial_2015,Chow_2015
and the underlying substrate
cite:raj_wettability_2013,rafiee_wetting_2012,shih_breakdown_2012,shih_wetting_2013,
since the length scale for the van der Waals (vdW) interactions is
comparable to the thickness of a monolayer. On the other hand, a
subtle but important fact is that the 2D semimetals (e.g, graphene and
silicene) and 2D semiconductors (e.g., transition metal
dichalcogenides (TMDCs)) possess low density of states (DOSs) around
the intrinsic Fermi level ($E_{\mathrm{F}}$), such that the effect of
doping, either induced by the surroundings
cite:Chen_2013,Varchon_2007,Giovannetti_2008, or by the electrostatic
gating cite:Das_2008,Perera_2013, also comes into play. Very recently,
the doping-induced change in the wettability of graphene has been
observed in the contact-angle experiments
cite:hong_mechanism_2016,goniszewski_correlation_2016,ashraf_doping-induced_2016,
and the molecular dynamics (MD) simulations
cite:ostrowski_tunable_2014,ren_interfacial_2015,Taherian_2015,daub_electrowetting_2007. However,
most reports described the doping-dependent wettability with the basic
Young-Lippmann equation (YLE) cite:Lippmann_1875, whereas the
interplay between the polar orientation of water molecules at the
interface cite:Shen_2006 and the electronic structure of the 2D
materials is often ignored. In order to address the discrepancies
among the literature, a more complete theoretical picture that bridges
the gap between different length scales is clearly required.


** Our proposal                                                     :ignore:

In this letter, we propose the first theoretical framework to model
the change of interfacial tension between liquid and a sheet of
monolayer 2D material. Multiscale physical phenomena are
considered. At the atomic scale, we formulate the dependence of
surface energy of a 2D material on the doping density using the
quantum capacitance (QC) calculated by the density functional theory
(DFT). Next, the surface-charge-induced reorientation of liquid
molecules adjacent to the interface is associated with an N-body
system, which is resolved by molecular dynamics (MD) simulations,
allowing quantification of the interfacial tension in the absence of
electrolytes in liquid. The effect of the electrical double layer
(EDL) induced by the electrostatic interactions between the 2D
material surface charges and the ionic species in liquid, is then
addressed at the continuum level. Practical considerations, such as
the defect density and the surface contamination are also taken into
account. Finally, we examine and validate our theory by comparing with
the contact angle changes reported in the electrowetting and the
substrate-induced doping experiments.


* Description of model                                               :ignore:

** Basic model                                                      :ignore:
Due to the complex dynamic nature of wetting
cite:Cassie_1944,Wenzel_1936,Gao_2007,Marmur_2009, we only study the
static wettability of 2D materials. We only consider water as the
liquid phase, as most liquid-phase applications of 2D materials are
also in aqueous environment. The macroscopic feature of
wetting--contact angle $\theta$, is connected to the interfacial
adhesion energy $\Phi_{\mathrm{2D-w}}$ by the Young's equation:
#+NAME: eqn:young's equation
\begin{equation}
\Phi_{\mathrm{2D-w}} = -\gamma_{\mathrm{L}}(1+\cos\theta)
\end{equation}
where $\Phi_{\mathrm{2D-w}}$ is defined as:
#+NAME: eqn:def-adhesion
\begin{equation}
\Phi_{\mathrm{2D-w}} = \gamma_{\mathrm{2D-w}} - \gamma_{\mathrm{2D}} - \gamma_{\mathrm{w}}
\end{equation}

where $\gamma_{\mathrm{2D-w}}$ is the surface tension between the
interface of the 2D material and the aqueous phase,
$\gamma_{\mathrm{2D}}$ and $\gamma_{\mathrm{w}}$ are the surface
tensions of the 2D material and water in air,
respectively.

** The adhesion energy                                              :ignore:
 $\Phi_{\mathrm{2D-w}}$ is contributed by both the
short-range dispersion interaction and long-range electrostatic
interaction between the 2D material and water. The existence of
additional charges in 2D materials gives rise to the reorientation of
adjacent water molecules cite:ostrowski_tunable_2014. On the other
hand, the formation of electric double layer (EDL) in an ionic
solution near the interface also alters the interfacial adhesion
properties, known as the electrowetting effect cite:Lippmann_1908,
which has been widely used in microfluidic applications
cite:Mugele_2005.  Owing to the additive nature of dispersion and
electrostatic interactions, we propose that the change of interfacial
adhesion energy $\Delta \Phi_{\mathrm{2D-w}}$ is a combined effect of
the reorientation effect $\Delta \Phi_{\mathrm{2D-w}}^{\mathrm{or}}$ and EDL
formation $\Delta \Phi_{\mathrm{2D-w}}^{\mathrm{el}}$:
#+NAME: eqn:contrib-adhesion-change
\begin{equation}
\Delta \Phi_{\mathrm{2D-w}} = \Delta \Phi_{\mathrm{2D-w}}^{\mathrm{or}}
                              + \Delta \Phi_{\mathrm{2D-w}}^{\mathrm{el}}
\end{equation}

A multiscale approach is needed to combine both effects as their
effective length scales are different. We use molecular dynamics (MD)
simulations for sampling the orientation effect adjacent to the 2D
material; in addition a continuum model is implemented to describe the
contribution of EDL formation, since state-of-art MD simulations fail to
handle diluted ionic solution systems where the Debye length can be as
long as 10^3 nm. Our multiscale modeling approach is schematically illustrated in Fig. [[ref:fig:scheme-method]].

#+NAME: fig:scheme-method
#+CAPTION: Scheme of the multiscale approach for modeling the doping-induced wettability tuning of 2D materials.
#+ATTR_LATEX: :width 0.95\linewidth
#+ATTR_LATEX: :float t
[[file:../img/scheme-methods.pdf]]

 It is also noteworthy that our multiscale approach is compatible with
the issues of the intrinsic wettability and wetting translucency of 2D
materials. Since we are dealing with the change of interfacial
adhesion energy as a function of surface charge, the absolute value of
$\Phi_{\mathrm{2D-w}}$ or $\gamma_{\mathrm{2D-w}}$ (extracted from intrinsic wetting property and wetting translucency theory) can be treated as
independent variables.


* TODO Molecular Dynamic Simulations                                 :ignore:

** TODO Description of method                                       :ignore:

We model the charged 2D materials as rigid sheets with uniform surface
charge density $\sigma_{\mathrm{2D}}$, either by substrate or
electrostatic doping. We also assume that the 2D material has no
dissociable groups which can change the aqueous pH value
cite:zuccaro_tuning_2015 and the 2D material is inert to
electrochemical reaction at the interface
cite:bard_electrochemical_1980.  First we use graphene as a model
system to show the effect of reorientation of water molecules on the
interfacial adhesion energy. Different from previous approaches which
used MD simulations to extract the contact angle of nanodroplets on
graphene
cite:ostrowski_tunable_2014,daub_electrowetting_2007,ren_interfacial_2015,Taherian_2015,
where the interfacial adhesion energy cannot be accurately measured
due to changed contact area between water and graphene, here we
propose to use a continuous water monolith in the MD simulation with periodic boundary conditions in the x and y directions to
calculate the interfacial adhesion energy $\Phi_{\mathrm{2D-w}}$.
*************** TODO Description for MD simulation
*************** END


** Model and Plot                                                   :ignore:

The adhesion energy $\Phi_{\mathrm{2D-w}}^{or}$ in the MD simulation is
defined as:
#+NAME: eqn:Delta-Phi-or-definition
\begin{equation}
\begin{aligned}
\Phi_{\mathrm{2D-w}}^{or} &= (\Psi_{\mathrm{2D-w}} - \Psi_{\mathrm{w}} - \Psi_{\mathrm{2D}})\frac{1}{S \cdot N_{\mathrm{A}}} \\
                     &= \Phi_{\mathrm{LJ}} + \Phi_{\mathrm{CL}}
\end{aligned}
\end{equation}
where $S$ is the area of the graphene sheet (same as the contact area
 between water and graphene), $N_{\mathrm{A}}$ is the Avogadro's
 number, $\Psi_{\mathrm{2D-w}}$ is the total internal potential of the
 2D material-water system, and $\Psi_{\mathrm{w}}$ and
 $\Psi_{\mathrm{2D}}$ are the potentials of the separated water phase
 and 2D materials, respectively.  The adhesion energy can be further
 decomposed into the short-range Lenard-Jones potential term
 ($\Phi_{\mathrm{LJ}}$) and the long-range Coulombic interaction term
 ($\Phi_{\mathrm{CL}}$). Since $\Psi_{\mathrm{w}}$ and
 $\Psi_{\mathrm{2D}}$ are unalterable in the MD simulation, the change
 of interfacial adhesion energy $\Delta \Phi_{\mathrm{2D-w}}^{or}$ as a
 result of surface doping, is calculated as:
#+NAME: eqn:delta-Phi-2D-or
\begin{equation}
\begin{aligned}
\Delta \Phi_{\mathrm{2D}}^{or} &= \frac{\Delta \Phi_{\mathrm{2D-w}}}{S \cdot N_{\mathrm{A}}} \\
                               &= \Delta \Phi_{\mathrm{LJ}} + \Delta \Phi_{\mathrm{CL}}
\end{aligned}
\end{equation}
#+NAME: plot-change-adhesion
#+BEGIN_SRC python :exports none :tangle plot_change_adhesion.py
  import numpy
  import scipy
  import scipy.constants as const
  import matplotlib
  matplotlib.use("Agg")
  import matplotlib.pyplot as plt
  from fun_read_xvg import read_xvg_energy
  import pycse.orgmode as org

  charge_per_atom = [0, 1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 30]
  charge_per_atom += [-1, -2, -3, -4, -5, -6, -8, -10, -12, -15, -20, -30]
  charge_per_atom.sort()

  c_atom_to_sigma = lambda x: x*2/(2.465e-8**2*scipy.sin(scipy.pi/3))


  # Convert the adhesion energy from

  A_c = 15.1e-18                  # area of the whole plane in m^2

  f_base = "../data/MD/E_int_%d.xvg"


  vdW_tot = []
  vdW_err = []
  coulomb_tot = []
  coulomb_err = []
  potential_tot = []
  potential_err = []
  coul_LR = []

  f_0 = f_base % 0
  data = read_xvg_energy(f_0)
  vdw0 = data["LJ(SR)"]["Average"] + data["Disper.corr."]["Average"]
  coul0 = data["Coulomb(SR)"]["Average"] + data["Coul.recip."]["Average"]
  potential0 = data["Potential"]["Average"]
  coul_LR_0 = data["Coul.recip."]["Average"]

  for e in charge_per_atom:
      f_n = f_base % e
      # print(f_n)
      data = read_xvg_energy(f_n)
      vdw = data["LJ(SR)"]["Average"] + data["Disper.corr."]["Average"]
      vdw_err = data["LJ(SR)"]["RMSD"] + data["Disper.corr."]["RMSD"]
      # coul = data["Coulomb(SR)"]["Average"]
      coul = data["Coulomb(SR)"]["Average"] + data["Coul.recip."]["Average"]
      coul_err = data["Coulomb(SR)"]["RMSD"] + data["Coul.recip."]["RMSD"]
      _coul_LR = data["Coul.recip."]["Average"]
      potential = data["Potential"]["Average"]
      potential_err_ = data["Potential"]["RMSD"]
      # print(vdw, coul)
      vdW_tot.append(vdw-vdw0)
      coulomb_tot.append(coul-coul0)
      vdW_err.append(vdw_err)
      coulomb_err.append(coul_err)
      # potential_tot.append(potential-potential0-_coul_LR)
      potential_tot.append(potential-potential0)
      potential_err.append(potential_err_)
      # coul_LR.append(_coul_LR)

  charge_per_atom = numpy.array(charge_per_atom)*0.001
  # sigma = c_atom_to_sigma(charge_per_atom)
  n_2D = c_atom_to_sigma(charge_per_atom)/10**13
  vdW_tot = numpy.array(vdW_tot)/A_c/const.N_A*10**6
  vdW_err = numpy.array(vdW_err)/A_c/const.N_A*10**6
  coulomb_tot = numpy.array(coulomb_tot)/A_c/const.N_A*10**6
  coulomb_err = numpy.array(coulomb_err)/A_c/const.N_A*10**6
  potential_tot = numpy.array(potential_tot)/A_c/const.N_A*10**6
  potential_err = numpy.array(potential_err)/A_c/const.N_A*10**6
  # nn = numpy.linspace(-5, 5, 100)
  # params = numpy.polyfit(n_2D, vdW_tot, 2)
  # f = numpy.poly1d(params)
  # vv = f(nn)

  def plot_Phi_charge(fig, error=False):
      ax1 = fig.add_subplot(111)
      ax2 = ax1.twiny()           # For the charge
      # ax3 = ax1.twinx()           # For the surface tension
      l_tot = ax1.plot(n_2D, potential_tot, 's-',
               label=r"$\Delta \Phi_{\mathrm{2D}}^{or}$")
      l_vdw = ax1.plot(n_2D, vdW_tot, 's-',
               label=r"$\Delta \Phi_{\mathrm{LJ}}$")
      l_cl = ax1.plot(n_2D, coulomb_tot, 's-',
               label=r"$\Delta \Phi_{\mathrm{CL}}$")
      if error is True:
          ax1.fill_between(sigma/10**13,
                       vdW_tot-vdW_err, vdW_tot+vdW_err,
                       alpha=0.2, facecolor="blue")
          ax1.fill_between(sigma/10**13,
                       coulomb_tot-coulomb_err, coulomb_tot+coulomb_err,
                       alpha=0.2, facecolor="orange")
          ax1.fill_between(sigma/10**13,
                       potential_tot-potential_err, potential_tot+potential_err,
                       alpha=0.2, facecolor="green")
      # ax1.plot(nn, vv, color=l_vdw[0].get_color(), alpha=0.6)
      ax1.set_xlabel(r"$\sigma_{\mathrm{2D}}$ ($10^{13}$ $e\cdot$cm$^{-2}$)")
      ax1.set_ylabel(r"$\Delta \Phi$ (mJ$\cdot$m$^{-2}$)")
      ax1.legend(loc=1, bbox_to_anchor=(0.95, 1.0))
      ax1.set_xlim(-5, 5)
      ax1.set_ylim(-10, 15)
      # Change the second x axis

      ax2_ticks = numpy.linspace(-0.012, 0.012, 7)
      ax2.set_xticks(c_atom_to_sigma(ax2_ticks)/10**13)
      ax2.set_xticklabels(list(map(lambda s: "%.0f" % s, ax2_ticks*1000)))
      ax2.set_xlim(ax1.get_xlim())
      ax2.set_xlabel("$\sigma_{\mathrm{2D}}$ (10$^{-3}$ $e$/atom)")
      fig.tight_layout(pad=0)

  # ax1.set_xlim(-20, 20)



  # ax2_ticks = numpy.linspace(-0.03, 0.03, 7)
  # ax2.set_xlim(ax1.get_xlim())
  # ax2.set_xticks(c_atom_to_sigma(ax2_ticks)/10**13)
  # ax2.set_xticklabels(list(map(str, ax2_ticks)))
  # # ax2.plot(charge_per_atom, potential_tot, alpha=0)
  # ax2.set_xlabel("Unit charge per atom", labelpad=10)


  # # print(ax1.get_ylim())
  # # print(ax1.get_yticks())
  # ax3.set_yticks(ax1.get_yticks())
  # ax3.set_ylim(ax1.get_ylim())
  # ax3_yticks = ax1.get_yticks()/A_c/const.N_A*10**6
  # ax3.set_yticklabels(list(map(lambda a: "%.1f"%a, ax3_yticks)))
  # # ax3.plot(sigma/10**13, potential_tot/A_c/const.N_A*1000, alpha=0.0)
  # ax3.set_ylabel(r"$\Delta\gamma_{\mathrm{WG}}$ [mJ$\cdot$m$^{-2}$]", labelpad=-2)


  # org.figure(plt.savefig("../img/e-vdw.png"))
  fig = plt.figure()

  if __name__ == "__main__":
      plot_Phi_charge(fig)
      org.figure(plt.savefig("../img/e-vdw-2.pdf"))



#+END_SRC

#+RESULTS: plot-change-adhesion
:RESULTS:
[[file:../img/e-vdw-2.pdf]]
:END:

#+NAME: plot-density
#+BEGIN_SRC python :exports none :tangle plot_density.py
  import numpy, matplotlib
  matplotlib.use("Agg")
  import matplotlib.pyplot as plt
  import scipy.constants as const
  import scipy
  import pycse.orgmode as org

  charge_per_atom = [-12, 0, 12]

  c_atom_to_sigma = lambda x: x*2/(2.465e-8**2*scipy.sin(scipy.pi/3))
  z_gr = 2.177

  f_charge_base = "../data/MD/charge_int_%d.xvg"
  f_charge_water = "../data/_MD/charge_water_surf.xvg"

  f_dens_base = "../data/MD/density_int_%d.xvg"
  f_dens_water = "../data/MD/density_water_surf.xvg"

  charge_per_atom.sort()

  c_water = numpy.genfromtxt(f_charge_water, delimiter=(12, 17), skip_header=19)
  d_water = numpy.genfromtxt(f_dens_water, delimiter=(12, 17), skip_header=19)

  # ax1.plot(c_water[:, 0] - z_gr, c_water[:, 1], label="Water Only")

  def plot_den(fig, what="mass"):
      ax = fig.add_subplot(111)
      if what is "mass":
          for c in charge_per_atom:
              d_sys = numpy.genfromtxt(f_dens_base % c,
                                       delimiter=(12, 17), skip_header=19)
              ax.plot(d_sys[:, 0] - z_gr,
                      d_sys[:, 1], label=r"%d$\times10^{-3}$ $e$/atom" % (c))
          ax.set_ylabel(r"$\rho_{\mathrm{w}}$ (kg$\cdot$m$^{-3}$)")
          ax.set_xlabel(r"$z$ (nm)")
          ax.set_xlim(0, 1.5)
          ax.legend(loc=0)
      elif what is "charge":
          for c in charge_per_atom:
              c_sys = numpy.genfromtxt(f_charge_base % c,
                                       delimiter=(12, 17), skip_header=19)
              ax.plot(c_sys[:, 0] - z_gr, c_sys[:, 1],
                      label=r"%d$\times10^{-3}$ $e$/atom" % (c) )
          ax.set_ylabel(r"$\delta_{\mathrm{w}}$ ($e\cdot$nm$^{-3}$)")
          ax.set_xlabel(r"$z$ (nm)")
          ax.set_xlim(0, 1.5)
          ax.legend(loc=0)

      fig.tight_layout(pad=0)

  if __name__ == "__main__":
      fig = plt.figure()
      plot_den(fig, what="mass")
      org.figure(plt.savefig("../img/density_m.pdf"))
      plt.cla()
      fig = plt.figure()
      plot_den(fig, what="charge")
      org.figure(plt.savefig("../img/density_c.pdf"))





#+END_SRC

#+RESULTS: plot-density
:RESULTS:
[[file:../img/density_m.pdf]]
[[file:../img/density_c.pdf]]
:END:

#+NAME: plot-fig-adhesion-density
#+BEGIN_SRC python :exports results 
  from pubfigure.FigureCollection import FigureCollection
  from plot_change_adhesion import plot_Phi_charge
  from plot_density import plot_den
  import pycse.orgmode as org

  fc = FigureCollection(pagesize=(4.0, 4.5),
			figure_style="science",
			col=1,
			row=9,)

  fig1, _ = fc.add_figure(loc=(0, 0, 1, 5))
  fig2, _ = fc.add_figure(loc=(0, 5, 1, 4))
  fig1.set_plot_func(plot_Phi_charge)
  fig2.set_plot_func(plot_den, what="mass")

  org.figure(fc.save_all("../img/fig-pot-dens.pdf", outline=False),
             label="fig:pot-dens",
             caption=("(a) Change of total adhesion energy "
                      r"$\Delta\Phi_{\mathrm{2D}}^{or}$, "
                      "contribution of Lenard-Jones interaction "
                      r"$\Delta\Phi_{\mathrm{LJ}}$ "
                      "and Coulombic interaction "
                      r"$\Delta\Phi_{\mathrm{CL}}$, "
                      "as a function of charge density on graphene. "
                      "(b) Local density of water molecule "
                      r"($\rho_{\mathrm{w}}$)  "
                      "as a function of distance $z$ from graphene surface."),
             attributes=[("latex", ":width 0.9\linewidth")],)

#+END_SRC

#+RESULTS: plot-fig-adhesion-density
:RESULTS:
#+CAPTION: (a) Change of total adhesion energy $\Delta\Phi_{\mathrm{2D}}^{or}$, contribution of Lenard-Jones interaction $\Delta\Phi_{\mathrm{LJ}}$ and Coulombic interaction $\Delta\Phi_{\mathrm{CL}}$, as a function of charge density on graphene. (b) Local density of water molecule ($\rho_{\mathrm{w}}$)  as a function of distance $z$ from graphene surface.
#+LABEL: fig:pot-dens
#+ATTR_latex: :width 0.9\linewidth
[[file:../img/fig-pot-dens.pdf]]
:END:


** Analysis                                                         :ignore:
The changes of adhesion energy terms $\Delta
\Phi_{\mathrm{2D-w}}^{or}$, $\Delta \Phi_{\mathrm{LJ}}$ and $\Delta
\Phi_{\mathrm{CL}}$, as functions of $\sigma_{\mathrm{2D}}$ , are
shown in Fig. [[ref:fig:pot-dens]](a). It can be seen that the
contribution from dispersion interaction $\Delta \Phi_{\mathrm{LJ}}$
has a very small magnitude of negative change (less than 2.5 mJ$\cdot
\mathrm{m}^{-2}$) when $\sigma_{\mathrm{2D}}$ ranges from
-5$\times10^{13}$ ~ 5$\times10^{13}$ $e\cdot \mathrm{cm}^{-2}$. On the
other hand, we find that $\Delta \Phi_{\mathrm{CL}}$ contributes
majorly to $\Delta \Phi_{\mathrm{2D-w}}^{or}$, indicating the
electrostatic nature of the doping-induced reorientation of water
molecules.
*************** TODO Validate the statement above
*************** END
It is also interesting to find that, unlike its counterpart from
dispersion interaction, $\Delta \Phi_{\mathrm{CL}}$ has a asymmetric
response to $\sigma_{\mathrm{2D}}$. We further plot the local density
of water molecules $\rho_{\mathrm{w}}$, as a function of distance $z$
from the graphene plane, which can be seen in Fig. [[ref:fig:pot-dens]](b). We consider
3 cases where the graphene layer is either charge-neutral, or
$\sigma_{\mathrm{2D}}=\pm 0.012\ e/ \mathrm{atom}$, respectively. We
find that the $\rho_{\mathrm{w}}$ at the first water layer adjacent to
graphene ($z \approx 3.2\ \mathrm{\AA}$) also responsed asymmetrically with
$\sigma_{\mathrm{2D}}$.  When $\sigma_{\mathrm{2D}}=-0.012\ e/
\mathrm{atom}$, $\rho_{\mathrm{w}}$ drops to ca. 80% of that in the
electroneutral system, while $\rho_{\mathrm{w}}$ at
$\sigma_{\mathrm{2D}}=0.012\ e/ \mathrm{atom}$ has a 8% increase in the density compared with the electroneutral system. The change of interfacial water
density can be ascribed by the polarity of water molecules. When the
graphene layer is positively charged, the O atom is more favorably
facing the graphene surface, while H atom is more favorably facing the
negatively-charged surface.
*************** TODO Describe the density change
*************** END
*************** TODO More in-depth discussion?
*************** END

It is noteworthy that although the process for investigating the
magnitude of $\Delta \Phi_{\mathrm{2D-w}}^{or}$ is similar for other 2D
materials other than graphene, the result obtained here cannot be
readily applied to other 2D materials, since the contribution of
dispersion interaction and electrostatic interaction can be completely
different cite:Govind_Rajan_2016,Chow_2015. Nevertheless, in
real-world measurements, due to the existence of the contamination
layer which has a typical thickness ca. 1~2 nm, the dispersion
interactions contributed by surface charge can be nearly completely
screened out; aqueous electrolytes can also greatly attenuate the
electric displacement field, compared with the dipole water model used
in the MD simulations. Therefore we propose that the effect of
reorientation may not be easily observable in current experimental
setups.


* Continuum Model                                                    :ignore:

** Basic model                                                      :ignore:
*** The effect of surface tension change due to surface charge     :ignore:
While the interfacial dispersion interaction vanishes several
molecules away from the surface, the long range electrostatic
interaction will cause the aqueous ions to rearrange at a much longer
length scale, forming an EDL at the interface and decrease the
interfacial surface tension by the phenomenon known as electrowetting.
Revisiting Eq. ([[ref:eqn:def-adhesion]]), we know that the change of
interfacial tension due to electrostatic interactions, $\Delta
\Phi_{\mathrm{2D-w}}^{\mathrm{el}}$, is given by:

#+NAME: eqn:Delta-Phi-el-def
\begin{equation}
\Delta \Phi_{\mathrm{2D-w}}^{\mathrm{el}} = \Delta \gamma_{\mathrm{2D-w}}^{\mathrm{el}}
                                           -\Delta \gamma_{\mathrm{2D}}^{\mathrm{el}}
                                           -\Delta \gamma_{\mathrm{w}}^{\mathrm{el}}
\end{equation}
where $\Delta \gamma_{\mathrm{2D-w}}^{\mathrm{el}}$, $\Delta
\gamma_{\mathrm{2D}}^{\mathrm{el}}$ and $\Delta
\gamma_{\mathrm{w}}^{\mathrm{el}}$ denote the change of surface
tension of 2D material-water interface, 2D material-air and
water-air, respectively. In the continuum model, all the changes of
surface tensions can be modeled by surface excesses. From the
isothermal 2D Gibbs-Duhem equation we can calculate the change of surface
energy $\mathrm{d} \gamma$:

#+NAME: eqn:iso-gibbs-duhem
\begin{equation}
\displaystyle
\mathrm{d}\gamma = -\frac{\sum_{\mathrm{i}} n_{\mathrm{i}}^{\mathrm{ex}}}{A} \mathrm{d} \mu_{\mathrm{i}} 
                 = -\sum_{\mathrm{i}} \Gamma_{i} \mathrm{d} \mu_{\mathrm{i}}
\end{equation}
where $n_{\mathrm{i}}^{\mathrm{ex}}$ is the surface excess amount of
specie i, $A$ is the unit are of the surface, $\Gamma_{\mathrm{i}}$ is
the surface excess concentration of specie i, and $\mu_{\mathrm{i}}$
is the chemical potential of specie i. Eq. ([[ref:eqn:iso-gibbs-duhem]])
indicates that: both the charges accumulated on the 2D material
surface and the formation of electric double layer will alter the
interfacial tension of 2D materials. As far as we are concerned, the
effect of charge-induced surface tension change of 2D materials has
rarely been addressed previously. For a charged 2D material surface in
air, the decrease of surface tension equals the work required to
charge the isolated 2D material:

#+NAME: eqn:dgamma-QC
\begin{equation}
\begin{aligned}
\mathrm{d} \gamma_{\mathrm{2D}}^{\mathrm{el}} &= -\Gamma_{e} \mathrm{d} E_{\mathrm{F}} \\
                                              &= -\frac{\sigma_{\mathrm{2D}}}{C_{\mathrm{2D}}} \mathrm{d}\sigma_{\mathrm{2D}}
\end{aligned}
\end{equation}
where $E_{\mathrm{F}}=\mu_{e}$ is the Fermi level of the 2D material
(equals the chemical potential of electrons in the 2D materials) and
$C_{\mathrm{2D}}$ is the quantum capacitance of the 2D material, which
is proportional to the density of states (DOS) $g(E_{\mathrm{F}})$ at
Fermi level $E_{\mathrm{F}}$:
$C_{\mathrm{2D}}=g(E_{\mathrm{F}})e^{2}$. Due to the fact that most 2D
materials possess quantum capacitances essentially smaller than those
of bulk materials, one would expect that the charge-induced-decrease
of surface tension of 2D materials is more prominent than bulk
materials. Here we demonstrate the degree of charge-induced
surface tension decrease of several typical 2D materials in
air. The selected 2D materials are graphene, silicene (2D allotrope
of Si), germanene (2D allotrope of Ge), MoS_2, MoTe_2, WS_2 and
WTe_2, respectively. Their DOS as functions of $E_{\mathrm{F}}$ have been previously
reported by density functional theory (DFT) calculation, based on the
HSE06 hybrid functional approach cite:tian_multiscale_2016. The
charge-induced decrease of surface tension of the 2D materials
$\Delta \gamma_{\mathrm{2D}}^{\mathrm{el}}$, as a function of the
surface charge density $\sigma_{\mathrm{2D}}$, is shown in Fig. [[ref:fig:dgamma-sigma]].
#+NAME: py-cal-dgamma-2D
#+BEGIN_SRC python :exports results 
  import matplotlib, numpy, scipy
  matplotlib.use("Agg")
  import matplotlib.pyplot as plt
  import scipy.constants as const
  import pycse.orgmode as org
  from scipy.integrate import cumtrapz, trapz
  from dcos_sigma import cal_2D
  from pubfigure.FigureCollection import FigureCollection

  Materials = {}
  # The parameters are using values of 10^13 e/cm^2 for sigma
  # and uF/cm^2 for C

  Materials['MoS2'] = dict(n=[48.32, 0, 3.6270e-13],
                           p=[186.6, 0, 9.6567e-13],
                           name=r"MoS$_{2}$",)
  Materials['MoSe2'] = dict(n=[55.94, 0, 4.2354e-13],
                            p=[74.76, 0, 4.7792e-14],
                            name=r"MoSe$_{2}$",)
  Materials['MoTe2'] = dict(n=[61.67, 0, 4.7299e-13],
                            p=[82.52, 0, 1.0820e-13],
                            name=r"MoTe$_{2}$",)
  Materials['WS2'] = dict(n=[33.92, 0, 3.6270e-13],
                          p=[169.5, 0, 9.1869e-13],
                          name=r"WS$_{2}$",)
  Materials['WSe2'] = dict(n=[36.99, 0, 3.955e-13],
                           p=[52.01, 0, 3.0965e-13],
                           name=r"WSe$_{2}$",)
  Materials['WTe2'] = dict(n=[37.87, 0, 3.8405e-13],
                           p=[52.01, 0, 4.0845e-13],
                           name=r"WTe$_{2}$",)
  Materials['P'] = dict(n=[54.47, 0, 8.9640e-14],
			p=[67.86, 0, 6.7077e-15],
			name="Phosphorene",)
  Materials['Gr'] = dict(n=[0, 2.745969059762e-06, 0],
			 p=[0, 2.747402905456e-06, 0],
			 name="Graphene",)
  Materials['Si'] = dict(n=[0, 4.872842161338e-06, 0],
			 p=[0, 4.663485703981e-06, 0],
			 name="Silicene")
  Materials['Ge'] = dict(n=[0, 5.447917304238e-06, 0],
			 p=[0, 4.868667384166e-06, 0],
			 name="Germanene")

  # Only single unit!
  def f_C_2D(sigma_, mater):
      # Receive the sigma in SI
      param_n = Materials[mater]["n"]
      param_p = Materials[mater]["p"]
      n_13 = sigma_/const.e/10**4
      # Return the C_2D in SI
      if n_13>0:
          return (param_p[0]
                  + param_p[1]*scipy.absolute(n_13)**0.5
                  + param_p[2]*scipy.absolute(n_13))/100
      else:
          return (param_n[0]
                  + param_n[1]*scipy.absolute(n_13)**0.5
                  + param_n[2]*scipy.absolute(n_13))/100

  def f_dgamma(sigma_lim, mater):
      # sigma_lim is using the absolute value
      param_n = Materials[mater]["n"]
      param_p = Materials[mater]["p"]
      sigma_p = numpy.linspace(sigma_lim*10**-6, sigma_lim, 200)
      sigma_n = numpy.linspace(-sigma_lim*10**-6, -sigma_lim, 200)
      C_2D_p = numpy.array([f_C_2D(sigma_, mater) for sigma_ in sigma_p])
      C_2D_n = numpy.array([f_C_2D(sigma_, mater) for sigma_ in sigma_n])
      dgamma_p = cumtrapz(-sigma_p/C_2D_p, sigma_p, initial=0)
      dgamma_n = cumtrapz(-sigma_n/C_2D_n, sigma_n, initial=0)
      sigmas = numpy.hstack([sigma_n[::-1], sigma_p])
      dgammas = numpy.hstack([dgamma_n[::-1], dgamma_p])
      return sigmas, dgammas

  def plot_dgamma_sigma(fig):
      ax = fig.add_subplot(111)
      n_lim = 5
      sigma_lim = n_lim*10**13*10**4*const.e

      for m in ["Gr", "Si", "Ge", "MoS2", "MoTe2", "WS2", "WTe2"]:
          sigmas, dgammas = f_dgamma(sigma_lim, m)
          ax.plot(sigmas/const.e/10**17, dgammas*1000, label=Materials[m]["name"])
      ax.set_xlabel(r"$\sigma_{\mathrm{2D}}$ ($10^{13}\ e\cdot$cm$^{-2}$)")
      ax.set_ylabel(r"$\Delta\gamma_{\mathrm{2D}}^{el}$ (mJ$\cdot$m$^{-2}$)")
      ax.legend(loc=0, prop=dict(size="smaller"))
      # ax.set_xlim(-2, 2)
      # ax.set_ylim(0, 0.15)
      fig.tight_layout(pad=0)



  if __name__ == "__main__":
      fc = FigureCollection(pagesize=(2.8, 2.3),
                            figure_style="science",
                            col=1, row=1)
      fig2, _ = fc.add_figure(label=False, outline=True)
      fig2.set_plot_func(plot_dgamma_sigma)
      org.figure(fc.save_all("../img/dgamma-sigma.pdf", outline=False),
		 attributes=[("latex", ":width 0.95\linewidth")],
		 label="fig:dgamma-sigma",
		 caption=(r"$\Delta \gamma_{\mathrm{2D}}^{\mathrm{el}}$ "
                          "as a function of "
                          r"$\sigma_{\mathrm{2D}}$ "
                          "for several 2D materials: graphene, silicene, germanene, "
                          r"MoS$_{2}$, MoTe$_{2}$, WS$_{2}$ and WTe$_{2}$"))

#+END_SRC

#+RESULTS: py-cal-dgamma-2D
:RESULTS:
#+CAPTION: $\Delta \gamma_{\mathrm{2D}}^{\mathrm{el}}$ as a function of $\sigma_{\mathrm{2D}}$ for several 2D materials: graphene, silicene, germanene, MoS$_{2}$, MoTe$_{2}$, WS$_{2}$ and WTe$_{2}$
#+LABEL: fig:dgamma-sigma
#+ATTR_latex: :width 0.95\linewidth
[[file:../img/dgamma-sigma.pdf]]
:END:
It can be observed from our calculations that graphene has the largest
degree of surface tension decrease (ca. 22 mJ$\cdot\mathrm{m}^{-2}$
when $\sigma_{\mathrm{2D}}=\pm5\times10^{13}\ e\cdot
\mathrm{cm}^{-2}$), due to the fact that graphene has the lowest
$C_{\mathrm{2D}}$ among the selected 2D materials
cite:tian_multiscale_2016. We can rationalize the $\Delta
\gamma_{\mathrm{2D}}^{\mathrm{el}}$ - $\sigma_{\mathrm{2D}}$ relation
of the 2D materials by their $C_{\mathrm{2D}}$ values: the 2D
semimetals (graphene, silicene and germanene) generally have larger
decrease of surface tension, compared with the semiconducting 2D TMDCs
at same doping level, due to the limited DOS dispersion in 2D
semimetals. Notably, the results indicate that a significant decrease
of surface tension of 2D materials (at the order of 10 mJ$\cdot
\mathrm{m}^{-2}$) can be achieved with a doping at the order of
$10^{13}\ e\cdot \mathrm{cm}^{-2}$, and may eventually be experimentally
observed.

Similarly, $\Delta \gamma_{\mathrm{2D-w}}^{\mathrm{el}}$ is
contributed by both the 2D surface charge and the charge accumulation
in the EDL:

#+NAME: eqn:dgamma-2D-w
\begin{equation}
\mathrm{d}\gamma_{\mathrm{2D-w}}^{\mathrm{el}} = -\frac{\sigma_{\mathrm{2D}}}{e} \mathrm{d}E_{\mathrm{F}}
-\sum_{\mathrm{i}} z_{\mathrm{i}}e\Gamma_{\mathrm{i}}^{\mathrm{s}} \mathrm{d}\psi_{\mathrm{2D}}
\end{equation}
where $\Gamma_{\mathrm{i}}^{\mathrm{s}}$ and $z_{\mathrm{i}}$ are the
surface excess concentration and valency of ionic solute i,
respectively; $\psi_{\mathrm{2D}}$ is the electrostatic potential at the 2D
material-water interface. On the other hand $\gamma_{\mathrm{w}}$ is
independent of the surface charge of the 2D material, since no surface
excess is present at the water-air interface. We therefore derive
the expression for $\Delta \Phi_{\mathrm{2D-w}}^{\mathrm{el}}$ as
follows:

#+NAME: eqn:Delta-Phi-final
\begin{equation}
\begin{aligned}
\Delta \Phi_{\mathrm{2D-w}}^{\mathrm{el}} &= -\frac{\sigma_{\mathrm{2D}}}{e}dE_{\mathrm{F}} 
                                             -\sum_{\mathrm{i}} z_{\mathrm{i}}e\Gamma_{\mathrm{i}}^{\mathrm{s}} \mathrm{d}\psi_{\mathrm{2D}}
                                             +\frac{\sigma_{\mathrm{2D}}}{e}dE_{\mathrm{F}} \\
                                          &= -\sigma_{\mathrm{L}} \mathrm{d}\psi_{\mathrm{2D}}
\end{aligned}
\end{equation}
where $\sigma_{\mathrm{L}}$ is the total charge density in the EDL. As
the accumulation of charge on the 2D material surface occurs both on
the 2D material-air and 2D material-water interfaces, their
contributions to the surface tension is canceled out. As a result
$\Delta \Phi_{\mathrm{2D-w}}^{\mathrm{el}}$ is governed by the ion
accumulation in EDL alone, in consistent with the trivial
electrowetting theory (constant solid surface tension). However, the
absolute values of $\gamma_{\mathrm{2D-w}}$ and $\gamma_{\mathrm{2D}}$
do change due to the aforementioned phenomenon.

*** The effect of EDL                                              :ignore:

To evaluate the effect of electrowetting, we first
consider that a contamination layer with thickness $d_{\mathrm{c}}$
covers the 2D material surface. Since the airborne contaminants are
mostly hydrocarbon compounds, they can be treated as a dielectric
layer with permittivity $\epsilon_{\mathrm{c}}$. We use the
Gouy-Chapman-Stern model to describe the EDL in the aqueous phase,
which consists a Helmholtz double layer with the same permittivity
$\epsilon_{\mathrm{w}}$ as water, and thickness $d_{\mathrm{H}}$,
together with a diffuse layer where ionic distribution is described by
the Gouy-Chapman equation.  The potentials at the surface of the 2D
material, the contamination layer surface and the outer Helmholtz
plane (the interface between the Helmholtz double layer and the
diffuse layer) are $\psi_{\mathrm{2D}}^{*}$, $\psi_{\mathrm{2D}}$ and
$\psi_{\mathrm{L}}$, respectively. An illustration of the model for the
2D-material-water interface is shown in Fig. [[ref:fig:scheme-EDL]].

#+NAME: fig:scheme-EDL
#+CAPTION: Scheme of the interface between the 2D material and the aqueous phase. A electrostatic potential $\psi_{\mathrm{2D}}$ is built at the interface, as a result of surface charge on 2D material $\sigma_{\mathrm{2D}}$.
#+ATTR_LATEX: :width 0.95\linewidth
[[file:../img/scheme-EDL.pdf]]

If we neglect specific adsorption of ions at the solid-liquid interface,
electroneutrality ensures that the charge density of the 2D material
$\sigma_{\mathrm{2D}}$ balances the total charge density of the EDL
$\sigma_{\mathrm{L}}$ cite:bard_electrochemical_1980:
\begin{equation}
\sigma_{\mathrm{2D}} + \sigma_{\mathrm{L}} = 0
\end{equation}
From the Gouy-Chapman model of 1 symmetric electrolyte we know:
  \begin{align}
  \displaystyle
  \label{eqn:psi-L}
  \psi_{\mathrm{L}} &= -\frac{2k_{\mathrm{B}}T}{z_{0}e} 
                         \sinh^{-1}\left(
                           \frac{\sigma_{\mathrm{L}}}{\sqrt{8c_{0}N_{\mathrm{A}}\epsilon_{\mathrm{w}}k_{\mathrm{B}}T}}
                            \right) \\
  \label{eqn:psi-2D}
  \psi_{\mathrm{2D}} &= \psi_{\mathrm{L}} - \sigma_{\mathrm{L}}\frac{d_{\mathrm{H}}}{\epsilon_{\mathrm{w}}} \\
  \psi_{\mathrm{2D}}^{*} &= \psi_{\mathrm{2D}} - \sigma_{\mathrm{L}}\frac{d_{\mathrm{c}}}{\epsilon_{\mathrm{c}}}
  \end{align} 
where $z_{0}$ is the valency of the electrolyte, $c_{0}$ is the
concentration of the electrolyte, $N_{\mathrm{A}}$ is the Avogadro
constant and $k_{\mathrm{B}}$ is the Boltzmann constant. While the
contamination layer is responsible for a potential drop across the
solid phase, the solid-liquid interfacial potential
$\psi_{\mathrm{2D}}$ which contributes to the $\Delta \Phi_{\mathrm{2D-w}}^{el}$, is only governed by $\sigma_{\mathrm{L}}$. Therefore
we conclude that the existence of a contamination layer does not affect
the magnitude of $\Delta \Phi_{\mathrm{2D-w}}}^{el}$.

** Gibbs adsorption                                                 :ignore:
The exact solution of $\Delta
\Phi_{\mathrm{2D-w}}^{el}$ can be derived from Eqs ([[ref:eqn:psi-2D]])
and (ref:eqn:psi-L):
#+NAME: eqn:Delta-Phi-exact
\begin{equation}
\begin{aligned}
\Delta \Phi_{\mathrm{2D-w}}^{el}
&= -\int_{0}^{\psi_{\mathrm{2D}}} \sigma_{\mathrm{L}} \mathrm{d}\psi' \\
&= -\int_{0}^{\sigma_{\mathrm{L}}} \sigma'\left(
   \frac{1}{C_{\mathrm{H}}} + \frac{1}{C_{\mathrm{L}}}
                                          \right) \mathrm{d}\sigma' \\
&= -\frac{\sigma_{\mathrm{L}}^{2}}{2C_{\mathrm{H}}}
    -\sqrt{\frac{32k_{\mathrm{B}}^{3}T^{3} \epsilon_{\mathrm{w}} c_{0} N_{\mathrm{A}}}{z_{0}^{2}e^{2}}}
   \left[\cosh(\frac{z_{0}e\psi_{\mathrm{L}}}{2k_{\mathrm{B}}T}) - 1\right] \\
&= -\frac{\sigma_{\mathrm{L}}^{2}}{2C_{\mathrm{H}}} 
   - \frac{\sigma_{\mathrm{L}}^{2}}{C_{\mathrm{L}} 
   + \frac{\epsilon_{w}}{\lambda_{\mathrm{D}}}}
\end{aligned}
\end{equation}
where $C_{\mathrm{H}}=\epsilon_{w}/d_{\mathrm{H}}$ is the geometric
capacitance of the Helmholtz double layer,
$C_{\mathrm{L}}=\sqrt{\frac{2z_{0}^{2}e^{2}\epsilon_{\mathrm{w}}c_{0}N_{\mathrm{A}}}{k_{\mathrm{B}}T}}
\cosh (\frac{z_{0}e\psi_{\mathrm{L}}}{2k_{\mathrm{B}}T})$ is the
capacitance of diffuse layer derived from the Gouy-Chapman equation,
and
$\lambda_{\mathrm{D}}=\sqrt{\frac{\epsilon_{\mathrm{w}}k_{\mathrm{B}}T}{2z^{2}e^{2}c_{0}N_{\mathrm{A}}}}$
is the Debye length of the electrolyte. The quantity
$\epsilon_{\mathrm{w}}/\lambda_{\mathrm{D}}$ is actually the
Debye-Hückel-style capacitance of the EDL.
Eq. (ref:eqn:Delta-Phi-exact) shows that $\Delta
\Phi_{\mathrm{2D-w}}^{el}$ consists of the contributions from the
Helmholtz double layer and the diffuse layer, respectively.  Note that
at room temperature, when $\sigma_{\mathrm{2D}}$ is large
(e.g. $10^{13}$ $e\cdot \mathrm{cm}^{-2}$) and $c_{0}$ is small
(e.g. $10^{-7}$ mol$\cdot \mathrm{L}^{-1}$),
#+BEGIN_SRC python :exports results :noeval
  import scipy.constants as const
  from scipy import arcsinh

  A = (8*const.k*298*80*const.epsilon_0*10**-7*1000*const.N_A)**0.5
  sigma = const.e*10**13*10**4
  psi = arcsinh(sigma/A)*2*const.k*298/const.e*1000  # potential in mV

  print(r"\psi_{\mathrm{L}}=%.0f mV" % psi)

#+END_SRC

#+RESULTS:
:RESULTS:
\psi_{\mathrm{L}}=347 mV
:END:
, which is much larger than $k_{\mathrm{B}}T/e$, causing a significant
discrepancy between the Gouy-Chapman capacitance $C_{\mathrm{L}}$ and
the Debye-Hückel capacitance
$\epsilon_{\mathrm{w}}/\lambda_{\mathrm{D}}$. This effect is often
ignored in previous studies concerning the electrowetting on graphene
and other 2D materials
cite:ostrowski_tunable_2014,daub_electrowetting_2007,goniszewski_correlation_2016,ashraf_doping-induced_2016,
and the classical Young-Lippman equation $\Delta
\gamma=-\frac{1}{2}C\psi^{2}$ (or $\Delta
\gamma=-\frac{\sigma^{2}}{2C}$) is casually used instead, assuming the
capacitance to be constant. Since most of the reported samples deals with pure water with extremely low $c_{0}$, the Debye-Hückel capacitance is much smaller than the Gouy-Chapman capacitance, leading to an overestimation of $\Delta\cos\theta$. Therefore our
derivation in Eq. [[ref:eqn:Delta-Phi-exact]] provides a more accurate
approach to analyze $\Delta \Phi_{\mathrm{2D-w}}^{\mathrm{el}}$ as a function of $\sigma_{\mathrm{2D}}$.

** pH-dependent                                                     :ignore:

#+NAME: py-ph-dependency
#+BEGIN_SRC python :exports results :tangle dcos_sigma.py
  import matplotlib
  from matplotlib import patches
  from pubfigure.FigureCollection import FigureCollection
  import numpy
  import scipy
  import scipy.constants as const
  import pycse.orgmode as org

  eps_w = 80*const.epsilon_0
  d_H = 0.3*10**-9                # Helmholtz plane
  n_L = numpy.linspace(-5, 5, 100)
  sigma_L = n_L*const.e*10**13*10**4
  T = 298
  C_H = eps_w/d_H
  gamma_w = 72.8e-3               # surface tension in SI

  def cal_2D(c0, sigma_, what="Delta_cos", z=1):
      # c0 should use mol/m^3
      sigma = -sigma_
      psi_L = -2*const.k*T/z/const.e*scipy.arcsinh(
              sigma/scipy.sqrt(8*c0*const.N_A*eps_w*const.k*T))
      psi_2D = psi_L - sigma/C_H
      A = scipy.sqrt(2*z**2*const.e**2*eps_w*c0*const.N_A/const.k/T)
      B = z*const.e*psi_L/(2*const.k*T)
      C_L = A*scipy.cosh(B)
      l_D = scipy.sqrt(eps_w*const.k*T/(2*z**2*const.e**2*c0*const.N_A))
      Delta_Phi_el = -sigma**2/(2*C_H) - sigma**2/(C_L+eps_w/l_D)
      Delta_cos = -Delta_Phi_el/gamma_w

      # Classical value
      # C = scipy.sqrt(32*const.k**3*T**3*eps_w*c0*const.N_A/z**2/const.e**2)
      # Delta_Phi_el = -sigma**2/(2*C_H) - C*(scipy.cosh(B)-1)
      # Delta_cos = -Delta_Phi_el/gamma_w

      # Classical value
      sigma = scipy.sqrt(8*c0*const.N_A*eps_w*const.k*T)*scipy.sinh(z*const.e*psi_L/2/const.k/T)
      C = scipy.sqrt(32*const.k**3*T**3*eps_w*c0*const.N_A/z**2/const.e**2)
      Delta_Phi_el = -sigma**2/(2*C_H) - C*(scipy.cosh(B)-1)
      Delta_cos = -Delta_Phi_el/gamma_w
      if what is "Delta_Phi_el":
          return Delta_Phi_el
      elif what is "Delta_cos":
          return Delta_cos

  def plot_ph_dep(fig):
      # Plot the Delta theta as function of sigma
      ax = fig.add_subplot(111)
      ax2 = ax.twinx()
      for ph in numpy.arange(0, -8, -1):
          pH = 10**ph
          pH_SI = pH*1000
          res = cal_2D(pH_SI, sigma_L, what="Delta_cos")
          # res = scipy.arccos(res)/scipy.pi*180
          ax.plot(n_L, res)
      ax.set_xlabel(r"$\sigma_{\mathrm{2D}}$ (10$^{13}$ $e\cdot$cm$^{-2}$)")
      ax.set_ylabel(r"$\Delta\cos\theta$")
      # Annotation now
      ax2.set_ylim(ax.get_ylim())
      ax2_yticks = -numpy.arange(0, 6)
      ax2_real_ytick = -ax2_yticks/1000/gamma_w
      ax2.set_yticks(ax2_real_ytick)
      ax2.set_yticklabels(list(map(str, ax2_yticks)))
      ax2.set_ylabel(r"$\Delta\Phi_{\mathrm{2D-w}}^{el}$ (mJ$\cdot$m$^{-2}$)")
      fig.tight_layout(pad=0)
      ax.text(0, 0.06,
              s=r"$c_{0}=10^{0}$~$10^{-7}$ mol$\cdot$L$^{-1}$",
              ha="center",
              va="center")
      # Extreme care with the arrow. Use annotate!
      ax.annotate("",
                  xy=(0.5, 0.03),
                  xytext=(4, 0.01),
                  arrowprops=dict(
                      width=0.25,
                      headwidth=4,
                      headlength=4,
                      facecolor="k",
                      edgecolor=None,))

  def plot_theta_2D(fig):
      ax = fig.add_subplot(111)
      theta_0 = numpy.linspace(40, 100, 100)
      ss, tt = numpy.meshgrid(sigma_L, theta_0)
      nn, tt_ = numpy.meshgrid(n_L, theta_0)
      c0 = 10**3*10**-7           # The concentration
      dd = scipy.arccos(scipy.cos(tt/180*scipy.pi)+cal_2D(c0, ss))/scipy.pi*180-tt
      pmesh = ax.pcolormesh(nn, tt, dd,
                          linewidth=0, rasterized=True,
                          cmap="viridis_r",
                          vmax=0)
      ax.set_xlabel(r"$\sigma_{\mathrm{2D}}$ (10$^{13} e\cdot$cm$^{-2}$)")
      ax.set_ylabel(r"$\theta*$ ($^{\circ}$)")
      cbar = fig.colorbar(pmesh, shrink=0.8)
      cbar.ax.tick_params(labelsize="small")
      cbar.set_label(label=r"$\Delta\theta$ ($^{\circ}$)",
                     size="small")
      fig.tight_layout(pad=0)

  if __name__ == "__main__":
      fc = FigureCollection(pagesize=(4, 5),
                            figure_style="science",
                            col=1, row=9)
      fc.fc_param["figure.lpad"] = 0.02
      fc.fc_param["figure.rpad"] = 0.0
      fc.fc_param["figure.tpad"] = 0.0
      fc.fc_param["figure.bpad"] = 0.0
      fc.fc_param["annotation.location"] = (0,0)
      fig1, num1 = fc.add_figure(loc=(0, 0, 1, 5), label=True)
      fig1.set_plot_func(plot_ph_dep)
      fig2, num2 = fc.add_figure(loc=(0, 5, 1, 4), label=True)
      fig2.set_plot_func(plot_theta_2D)
      org.figure(fc.save_all("../img/2d-ph-dependency.pdf", outline=False),
		 label="fig:Delta-cos-dependency",
		 caption=(r"(a) $\Delta\cos\theta$ "
                          "as a function of "
                          r"$\sigma_{\mathrm{2D}}$."
                          r"The concentration varies from "
                          r"$10^{0}$ to $10^{-7}$ mol$\cdot\mathrm{L}^{-1}$ "
                          r"(b) $\Delta\theta$ as a function of $\sigma_{\mathrm{2D}}$ "
                          "and the hypothetical contact angle on a charge-neutral "
                          r"2D material layer $\theta^{*}$. "
                          "c_{0} is taken as $10^{-7}$ mol$\cdot\mathrm{L}^{-1}$."),
		 attributes=[("latex", ":width 0.85\linewidth")])

#+END_SRC

#+RESULTS: py-ph-dependency
:RESULTS:
#+CAPTION: (a) $\Delta\cos\theta$ as a function of $\sigma_{\mathrm{2D}}$.The concentration varies from $10^{0}$ to $10^{-7}$ mol$\cdot\mathrm{L}^{-1}$ (b) $\Delta\theta$ as a function of $\sigma_{\mathrm{2D}}$ and the hypothetical contact angle on a charge-neutral 2D material layer $\theta^{*}$. c_{0} is taken as $10^{-7}$ mol$\cdot\mathrm{L}^{-1}$.
#+LABEL: fig:Delta-cos-dependency
#+ATTR_latex: :width 0.85\linewidth
[[file:../img/2d-ph-dependency.pdf]]
:END:

Consider that the aqueous phase contains a 1:1 electrolyte with
concentration $c_{0}$, the thickness of the Helmholtz plane
$d_{\mathrm{H}}=3\ \mathrm{\AA}$ cite:mcclendon_thickness_1927, and
the surface tension of water $\gamma_{\mathrm{w}}=72.8$ mJ$\cdot
\mathrm{m}^{-2}$ at $T=298$ K, we calculate the magnitude of
$\Delta\Phi_{\mathrm{2D-w}}^{el}$ and $\Delta\cos\theta$ as function
of $\sigma_{\mathrm{2D}}$, as shown in
Fig. [[ref:fig:Delta-cos-dependency]](a). We discover that both the
changes in the magnitude of interfacial adhesion energy and the
contact angle become more pronounced when the concentration of
electrolyte is lower. On the contrary, in conventional electrowetting
model, $\Delta\theta$ is governed by the constant capacitance of the
dielectric layer and is almost irrelevant to the $c_{0}$. The results indicate that the variation of $c_{0}$ has a significant impact on $\Delta
\Phi_{\mathrm{2D-w}}^{el}$ and $\Delta \cos \theta$ in the
electrowetting on doped 2D materials. This is due to the fact that the
interfacial potential $\psi_{\mathrm{2D}}$ is affected by both the
surface charge $\sigma_{\mathrm{2D}}$ and $c_{0}$, as indicated by
Eq. (ref:eqn:psi-L) and (ref:eqn:psi-2D). When $c_{0}$ is lower, a
larger potential is required to be built upon the interface, giving
rise to a larger change in the interfacial wetting property.

** Contact angle change                                             :ignore:

Although the "real" contact angle of a 2D material can be tedious to
determine, it is still possible to estimate the magnitude of contact
angle change due to the electrowetting effect, by assuming that the
hypothetical contact angle $\theta^{*}$ on a charge-neutral 2D
material layer. $\theta^{*}$ consists of the effect of intrinsic
wettability, surface contamination as well the wetting translucency of
the 2D material-liquid interface. Fig. [[ref:fig:Delta-cos-dependency]](b)
shows the magnitude of contact angle decrease as a function of both
$\sigma_{\mathrm{2D}}$ and $\theta^{*}$, when $c_{0}=10^{-7}$
mol$\cdot \mathrm{L}^{-1}$ (e.g. ideally pure water). Within the range
of typical contact angles reported on graphene (ca. 40$^{\circ}$ ~
100$^{\circ}$), and a doping level of $-5\times10^{13}$ ~
$5\times10^{13}$ $e \cdot \mathrm{cm}^{-2}$, we find that the maximum
magnitude $\Delta\theta$ is only ca. 7$^{\circ}$ when doping level is
as high as $\pm 5 \times 10^{13}$ $e\cdot \mathrm{cm}^{-2}$,
essentially smaller than previously reported values which were
measured both under smaller doping levels
cite:hong_mechanism_2016,ashraf_doping-induced_2016.  Due to the
saturation of CO_2 in water and soluble contaminants, the effect of
electrowetting may be even less prominent in real
situations. Therefore we believe that the electrowetting effect theory
on 2D materials alone, cannot explain the current findings of
doping-induced wettability change on graphene.


** TODO Analysis                                                    :ignore:

Practically in a contact angle measurement, the amount of water varies
from pL (using environmental scanning electron microscopy, ESEM) to
$\mathrm{\mu L}$ (using goniometer). Unlike nanodroplet models used in
MD contact angle simulations, the droplets used experimentally are
large enough to be exposed to both pristine and defect 2D surface, and
can therefore be trapped in the local minimal state caused by nanoscale
defects cite:raj_wettability_2013, giving rise to uncertainty of the
measured contact angle. Meanwhile, it is widely observed that
nanopores and macroscopic cracks exist in the transferred 2D material,
increasing the adhesion interaction between the substrate and the
water droplet.
#+BEGIN_COMMENT
We define the average surface coverage of the 2D material as
$f_{\mathrm{2D}}$, a parameter describing the averaged effect of
surface defect and cracks. At the boundary line, the apparent surface
tension $\hat{\gamma}_{\mathrm{2D-w}}$ (and as as its change upon
doping in 2D material) is a combined effect of the surface tension
between water-2D material and water-substrate:
#+NAME: eqn:mix-surface-tension
\begin{equation}
\Delta \hat{\gamma}_{\mathrm{2D-w}} = f_{\mathrm{2D}} \Delta \gamma_{\mathrm{2D-w}} +
                              (1-f_{\mathrm{2D}}) \Delta \gamma_{\mathrm{s-w}}
\end{equation}
where $\Delta \gamma_{\mathrm{s-w}}$ is the change of surface tension
between the substrate and water. In both substrate doping or electrostatic doping, non-zero surface charge still exist on the substrate: in substrate doping the 
#+END_COMMENT

#+NAME: fig:scheme-crack
#+ATTR_LATEX: :width 0.95\linewidth
#+CAPTION: Schematic drawing of the incomplete surface coverage in (a) substrate doping and (b) electrostatic doping systems. In both cases the aqueous phase is exposed directly to the substrate, leading to a discrepancy of apparent wetting properties compared with theoretical values.
[[file:../img/scheme-crack.pdf]]

We further consider the cases where the 2D material does not
completely cover the substrate. In both the substrate-induced doping
(see Fig. [[ref:fig:scheme-crack]](a)) and the electrostatic doping (see
Fig. [[ref:fig:scheme-crack]](b)) systems, substrate surface charge still
exists in non-covered regions: in surface doping the charged dopants
(i.e. polyelectrolytes) will instantly build up a EDL near the
substrate surface, while in electrostatic doping the electric
displacement field still forms between the conducting 2D material and
the gate electrode via the non-covered region, also causing the ions
to accumulate at the substrate-water interface. The interfacial
adsorption density of ions can essentially be larger than the surface
charge density on 2D material, due to the partial screening of
electric displacement field of the 2D material
cite:tian_multiscale_2016,Shih2015PartiallyScreened,Muruganathan_2015,Huttmann_2015. Since
the electrowetting effect is amphipolar, the accumulation of cations
and anions at the 2D material surface or the non-covered region
both contribute to the decrease of the apparent surface tension
$\hat{\gamma}_{\mathrm{2D-w}}$. We assume that the electrowetting at
the non-covered region is described by the classical Young-Lippman
$\Delta
\gamma_{\mathrm{nc}}=-\frac{\sigma_{\mathrm{2D}}^{2}}{2C_{\mathrm{nc}}}$,
where $C_{\mathrm{nc}}$ is the effective capacitance of the
non-covered region (taken as the EDL capacitance in substrate doping,
or the geometric capacitance of dielectric layer in electrostatic
doping). We therefore describe $\Delta
\hat{\gamma}_{\mathrm{2D-w}}$ as a combined effect of the
electrowetting on both pristine 2D material surface and non-covered substrate surface,
characterized by the surface coverage index $f$:
#+NAME: eqn:apparent-gamma-combined
\begin{equation}
\begin{aligned}
\Delta \hat{\gamma}_{\mathrm{2D-w}} &= f \Delta \gamma_{\mathrm{2D-w}} + (1-f)\Delta \gamma_{\mathrm{nc}} \\
&= f \Delta \gamma_{\mathrm{2D-w}}  -\frac{1}{2}(1-f)\frac{\sigma_{\mathrm{2D}}^{2}}{C_{\mathrm{nc}}}
\end{aligned}
\end{equation}

 It should also be noted that in electrowetting experiments
where additional charge is doped to the 2D material via dielectric
layer cite:hong_mechanism_2016, the initial doping density
$\sigma_{\mathrm{i}}$ should also be considered to explain the
asymmetric electrowetting behavior. In an electrowetting system where a
dielectric layer with geometric capacitance $C_{\mathrm{d}}$ and external
voltage $V_{\mathrm{2D}}$ is applied to the 2D material, the doping
density in the 2D material is calculated as cite:tian_multiscale_2016:
#+NAME: eqn:doping-vm-2D
\begin{equation}
V_{\mathrm{2D}} = \frac{\sigma_{\mathrm{2D}} - \sigma_{\mathrm{i}}} {C_{\mathrm{d}}} 
                 + \int_{\sigma_{\mathrm{i}}}^{\sigma_{\mathrm{2D}}} 
                   \frac{1}{C_{\mathrm{2D}}} \mathrm{d}\sigma'
\end{equation}


** Fitting data                                                     :ignore:
*** Data for fitting                                      :ignore:noexport:

#+NAME: ca-esem
| NAME |    CA | CA-err |    WF | WF-err |
| PSS  | 73.97 |   3.92 | 4.98  |  0.092 |
| PAA  | 75.00 |   2.96 | 4.96  |  0.096 |
| SiO2 | 80.88 |   2.95 | 4.60  |  0.026 |
| PAH  | 75.01 |   4.02 | 4.16  |   0.05 |
| PLL  | 74.03 |   1.98 | 4.12  |   0.09 |

#+NAME: ca-elw
|       V | CA |  
|    -100 | 78 |   
|       0 | 88 |   
|     100 | 60 | 

*** Fitting program                                                :ignore:
#+NAME: cal-charge-density
#+HEADERS: :var esem=ca-esem elw=ca-elw
#+Begin_src python :exports results
  import scipy
  import scipy.constants as const
  import matplotlib
  matplotlib.use("Agg")
  import matplotlib.pyplot as plt
  from scipy.integrate import cumtrapz
  import numpy
  from dcos_sigma import cal_2D
  import pycse.orgmode as org

  v_f = 1.1e6
  eps_sio2 = 3.9

  def e_cm2_to_SI(n):
      return n*const.e*10**4

  def SI_to_e_cm2(sigma):
      return sigma/const.e/10**4

  def EF_gr_from_sigma(sigma):
      A = scipy.sign(sigma)*const.hbar*v_f/const.e
      B = scipy.sqrt(scipy.pi*scipy.absolute(sigma)/const.e)
      return A*B

  def sigma_from_EF(EF):
      return scipy.sign(EF)*EF**2*const.e**3/const.pi/const.hbar**2/v_f**2

  def sigma_from_sio2(V_M, sigma0=0, t=280e-9):
      Cox = const.epsilon_0*eps_sio2 / t
      # VM to be voltage applied to 2D surface
      return Cox*V_M + sigma0


  EF_plt = numpy.linspace(-0.8, 0.8, 200)
  sigma_plt = sigma_from_EF(EF_plt)
  n_plt = SI_to_e_cm2(sigma_plt)/10**13

  c0 = 10**-7*1000

  dcos_plt = cal_2D(c0, sigma_plt)

  # Data for the ESEM
  data_esem = []
  sigma_esem = []
  sigma_err_esem = []
  dcos_esem = []
  dcos_err_esem = []

  esem_label = []

  theta0_esem = 81.0
  dcos0_esem = scipy.cos(theta0_esem/180*scipy.pi)
  for line in esem[1:]:
      esem_label.append(line[0])
      data_esem.append(line[1:])
      dEF = line[3] - 4.6
      dEF_r = dEF+line[4]
      dEF_l = dEF-line[4]
      sigma = sigma_from_EF(dEF)
      sigma_l = sigma_from_EF(dEF_l)
      sigma_r = sigma_from_EF(dEF_r)
      ca = line[1]
      ca_err = line[2]
      dcos = scipy.cos(ca/180*scipy.pi) - dcos0_esem
      dcos_l = scipy.cos((ca+ca_err)/180*scipy.pi) - dcos0_esem
      dcos_r = scipy.cos((ca-ca_err)/180*scipy.pi) - dcos0_esem
      sigma_esem.append(sigma)
      sigma_err_esem.append([abs(sigma-sigma_l), abs(sigma-sigma_r)])
      dcos_esem.append(dcos)
      dcos_err_esem.append([abs(dcos-dcos_l), abs(dcos-dcos_r)])

  sigma_esem = numpy.array(sigma_esem)
  sigma_err_esem = numpy.array(sigma_err_esem)
  n_esem = SI_to_e_cm2(sigma_esem)/10**13
  n_err_esem = numpy.transpose(SI_to_e_cm2(sigma_err_esem))/10**13
  dcos_esem = numpy.array(dcos_esem)
  dcos_err_esem = numpy.transpose(numpy.array(dcos_err_esem))

  nn_esem = numpy.linspace(-2, 2, 200)
  param_esem = numpy.polyfit(n_esem, dcos_esem, 2)
  func_esem = numpy.poly1d(param_esem)
  dd_esem = func_esem(nn_esem)


  l_D = scipy.sqrt(const.epsilon_0*80*const.k*298/(2*c0*const.N_A*const.e**2))
  C_D = const.epsilon_0*80/l_D
  func_esem_max = lambda s: 1/2*s**2/C_D
  dcos_esem_max = func_esem_max(sigma_plt)/0.072

  param_esem_max = numpy.polyfit(n_plt, dcos_esem_max, 2)
  f_esem = param_esem[0]/param_esem_max[0]
  sigma_i_esem = -(nn_esem[numpy.argmin(dd_esem)])
  # print(f_esem, sigma_i_esem)

  # Data for electrowetting
  theta0_elw = 88
  dcos0_elw = scipy.cos(theta0_elw/180*scipy.pi)
  data_elw = numpy.array(elw[1:])
  sigma_elw = sigma_from_sio2(data_elw[:,0])
  n_elw = SI_to_e_cm2(sigma_elw)/10**13
  dcos_elw = scipy.cos(data_elw[:,1]/180*scipy.pi) - dcos0_elw

  param_elw = numpy.polyfit(n_elw, dcos_elw, 2)
  func_elw = numpy.poly1d(param_elw)

  C_ox = const.epsilon_0*eps_sio2/280e-9
  func_elw_max = lambda s: 1/2*s**2/C_ox
  dcos_elw_max = func_elw_max(sigma_plt)/0.072
  param_elw_max = numpy.polyfit(n_plt, dcos_elw_max, 2)

  nn_elw = numpy.linspace(-1.5, 1, 200)
  dd_elw = func_elw(nn_elw)

  f_elw = param_elw[0]/param_elw_max[0]
  sigma_i_elw = -(nn_elw[numpy.argmin(dd_elw)])
  # print(f_elw, sigma_i_elw)


  def plot_fitting_f(fig):
      ax = fig.add_subplot(111)
      ax.plot(n_plt, dcos_plt, color="k", label="Theoretical")
      l_esem = ax.errorbar(x=n_esem, y=dcos_esem,
                  xerr=n_err_esem, yerr=dcos_err_esem,
                  fmt="s", label="ESEM Data")
      l_elw = ax.plot(n_elw, dcos_elw, "o", label="Electrowetting Data")
      ax.text(x=-0.85, y=0.25, ha="left", size="smaller",
              s= "".join((r"$f$=",
	                  "{:.3f}\n".format(f_elw),
	                  r"$\sigma_{\mathrm{i}}$",
	                  "={:.1f}".format(sigma_i_elw*10),
	                  r"$\times 10^{12}$",
                          r" $e\cdot$cm$^{-2}$",)),
      )
      ax.plot(nn_elw, dd_elw, "--", alpha=0.5, color=l_elw[0].get_color())
      ax.plot(nn_esem, dd_esem, "--", alpha=0.5, color=l_esem[0].get_color())

      ax.text(x=0.95, y=0.2, ha="left", size="smaller",
              s= "".join((r"$f$=",
	                  "{:.3f}\n".format(f_esem),
	                  r"$\sigma_{\mathrm{i}}$",
	                  "={:.1f}".format(sigma_i_esem*10),
	                  r"$\times 10^{12}$",
                          r" $e\cdot$cm$^{-2}$",)),
      )
      ax.set_xlabel(r"$\sigma_{\mathrm{2D}}$ ($10^{13}$ $e\cdot$cm$^{-2}$)")
      ax.set_ylabel(r"$\Delta\cos\theta$")
      ax.legend(loc=0)
      ax.set_xlim(-2, 2)
      ax.set_ylim(-0.05, 0.5)
      fig.tight_layout()

  matplotlib.style.use("science")
  fig = plt.figure(figsize=(4.0, 3.0))

  if __name__ == "__main__":
      plot_fitting_f(fig)
      org.figure(plt.savefig("../img/plot-fitting.pdf"),
		 attributes=[("latex", ":width 0.95\linewidth")],
		 label="fig:f-nc-exp",
		 caption=("Theoretical and fitted experimental data of "
                          r"$\Delta\cos\theta$ "
                          "as a function of "
                          r"$\sigma_{\mathrm{2D}}$. "
                          "The electrowetting data are extracted from Ref. "
                          "[[cite:hong_mechanism_2016]]; "
                          "the ESEM data are extracted from Ref. "
                          "[[cite:ashraf_doping-induced_2016]]. "))








#+END_SRC

#+RESULTS: cal-charge-density
:RESULTS:
#+CAPTION: Theoretical and fitted experimental data of $\Delta\cos\theta$ as a function of $\sigma_{\mathrm{2D}}$. The electrowetting data are extracted from Ref. [[cite:hong_mechanism_2016]]; the ESEM data are extracted from Ref. [[cite:ashraf_doping-induced_2016]]. 
#+LABEL: fig:f-nc-exp
#+ATTR_latex: :width 0.95\linewidth
[[file:../img/plot-fitting.pdf]]
:END:

*** Analysis of experimental data                                  :ignore:

To examine the effect of incomplete 2D material coverage, we select
two sets of reported experimental measurements of the wettability on
doped graphene sheet, namely the contact angles of substrate-doped
graphene measured by ESEM from Ref. cite:ashraf_doping-induced_2016
and the contact angles of electostatically-doped graphene via
goniometer from Ref. cite:hong_mechanism_2016. The contact angle at
experimentally "charge-neutral" condition (graphene attached to SiO_2
substrate for ESEM experiment or $V_{\mathrm{2D}}=0$ V in
electrowetting experiment, however $\sigma_{\mathrm{2D}}$ may not be 0
due to existence of $\sigma_{\mathrm{i}}$) is used as reference for
calculating $\mathrm{d}\cos\theta$. We use
Eq. [[ref:eqn:apparent-gamma-combined]] to extract $f$ and
$\sigma_{\mathrm{i}}$ for both experiments, as seen in
Fig. [[ref:fig:f-nc-exp]]. We observe that in both experimental data sets,
the measured $\Delta \cos \theta$ is essential larger than the
theoretical value derived from the Gouy-Chapman-Stern model described
here. Fitting results reveals both systems are lightly p-doped in the
"charge-neutral" condition, which corresponds well with other
experimental reports
cite:Shih2015PartiallyScreened,goniszewski_correlation_2016.  The
fitted $f$ values for both systems are as small as 3.7%-3.8%,
indicating the graphene layers are mostly complete. It is very
surprising to find out that due to large discrepancy of wetting
behavior on the 2D material and the underlying substrate, the measured
contact angle change can be greatly influenced by the existence of
minor defects in the 2D material. Our calculations show that extreme
care should be taken to interpret the true doping-tunable wetting
behavior of 2D materials.


** Other 2D materials                                               :ignore:

The doping-induced tuning of wetting on 2D materials opens a novel
avenue for 2D-material-based liquid manipulating devices. Unlike
conventional electrowetting on dielectric (EWOD) setup, no counter
electrode is required in the liquid phase, ensuring simpler device
design. Although Eq. [[ref:eqn:Delta-Phi-exact]] shows that the
electrowetting effect of 2D material is only dependent on the surface
charge $\sigma_{\mathrm{2D}}$, practically it is more favorable to
achieve the desired electrowetting by applying a smaller
$V_{\mathrm{2D}}$. A usual setup for electrostatic doping of 2D
material involves the use of high-k dielectric or ionic gating
cite:Das_2008,Radisavljevic_2011,Xu_2011,Newaz_2012, where the
$C_{\mathrm{d}}$ is comparable with $C_{\mathrm{2D}}$. Therefore the
contribution of $C_{\mathrm{2D}}$ in Eq. [[ref:eqn:doping-vm-2D]] cannot
be ignored. Combing Eqs. [[ref:eqn:psi-L]], [[ref:eqn:psi-2D]] and
[[ref:eqn:doping-vm-2D]], we get:

\begin{align}
\label{eqn:dV-sigma-2D}
\mathrm{d} V_{\mathrm{2D}} &= \left(\frac{1}{C_{\mathrm{d}}} +
\frac{1}{C_{\mathrm{2D}}}\right) \mathrm{d}\sigma_{\mathrm{2D}} \\
\label{eqn:dpsi-sigma-L}
\mathrm{d} \psi_{\mathrm{2D}} &= -\left( \frac{1}{C_{\mathrm{H}}}
+ \frac{1}{C_{\mathrm{L}}} \right) \mathrm{d}\sigma_{\mathrm{L}}
\end{align}
and by substituting $\sigma_{\mathrm{2D}} = -\sigma_{\mathrm{L}}$, we derive the ratio between $\psi_{\mathrm{2D}}$ and $V_{\mathrm{2D}}$, named as $\beta$:
#+NAME: eqn:beta
\begin{equation}
\beta = \frac{\mathrm{d} \psi_{\mathrm{2D}}}{\mathrm{d}
V_{\mathrm{2D}}} = \dfrac{\dfrac{1}{C_{\mathrm{L}}} +
\dfrac{1}{C_{\mathrm{H}}}}{\dfrac{1}{C_{\mathrm{d}}} + \dfrac{1}{C_{\mathrm{2D}}}}
\end{equation}
at a certain $c_{0}$, the larger $\beta$ is, the higher tunability in
wettability of the 2D material will be. On the device side, it can be
achieved if both $C_{\mathrm{d}}$ and $C_{\mathrm{2D}}$ are
larger. Increasing the value of $C_{\mathrm{2D}}$ can be implemented
by replacing graphene--a 2D semimetal, with a 2D semiconductor, such
as TMDC cite:tian_multiscale_2016. Here we evaluate a
2D-material-based electrowetting device consists of a 2 nm thick HfO_2
dielectric layer with $\epsilon_{\mathrm{d}}=24.0$, and an 2D material
sheet selected from graphene, silicene, germanene, MoS_2, MoTe_2, WS_2
and WTe_2 (see Fig. [[ref:fig:dcos-all-2D]](a)). The magnitude of $\Delta
\cos \theta$ as a function of $V_{\mathrm{2D}}$ in devices based on
different 2D materials is shown in Fig. [[ref:fig:dcos-all-2D]](b).
#+NAME: dcos-all-2D
#+BEGIN_SRC python :exports results 
  import matplotlib, numpy, scipy
  matplotlib.use("Agg")
  import matplotlib.pyplot as plt
  import scipy.constants as const
  import pycse.orgmode as org
  from scipy.integrate import cumtrapz, trapz
  from dcos_sigma import cal_2D
  from pubfigure.FigureCollection import FigureCollection

  Materials = {}
  # The parameters are using values of 10^13 e/cm^2 for sigma
  # and uF/cm^2 for C

  Materials['MoS2'] = dict(n=[48.32, 0, 3.6270e-13],
                           p=[186.6, 0, 9.6567e-13],
                           name=r"MoS$_{2}$",)
  Materials['MoSe2'] = dict(n=[55.94, 0, 4.2354e-13],
                            p=[74.76, 0, 4.7792e-14],
                            name=r"MoSe$_{2}$",)
  Materials['MoTe2'] = dict(n=[61.67, 0, 4.7299e-13],
                            p=[82.52, 0, 1.0820e-13],
                            name=r"MoTe$_{2}$",)
  Materials['WS2'] = dict(n=[33.92, 0, 3.6270e-13],
                          p=[169.5, 0, 9.1869e-13],
                          name=r"WS$_{2}$",)
  Materials['WSe2'] = dict(n=[36.99, 0, 3.955e-13],
                           p=[52.01, 0, 3.0965e-13],
                           name=r"WSe$_{2}$",)
  Materials['WTe2'] = dict(n=[37.87, 0, 3.8405e-13],
                           p=[52.01, 0, 4.0845e-13],
                           name=r"WTe$_{2}$",)
  Materials['P'] = dict(n=[54.47, 0, 8.9640e-14],
			p=[67.86, 0, 6.7077e-15],
			name="Phosphorene",)
  Materials['Gr'] = dict(n=[0, 2.745969059762e-06, 0],
			 p=[0, 2.747402905456e-06, 0],
			 name="Graphene",)
  Materials['Si'] = dict(n=[0, 4.872842161338e-06, 0],
			 p=[0, 4.663485703981e-06, 0],
			 name="Silicene")
  Materials['Ge'] = dict(n=[0, 5.447917304238e-06, 0],
			 p=[0, 4.868667384166e-06, 0],
			 name="Germanene")

  # Only single unit!
  def f_C_2D(sigma_, mater):
      # Receive the sigma in SI
      param_n = Materials[mater]["n"]
      param_p = Materials[mater]["p"]
      n_13 = sigma_/const.e/10**4
      # Return the C_2D in SI
      if n_13>0:
          return (param_p[0]
                  + param_p[1]*scipy.absolute(n_13)**0.5
                  + param_p[2]*scipy.absolute(n_13))/100
      else:
          return (param_n[0]
                  + param_n[1]*scipy.absolute(n_13)**0.5
                  + param_n[2]*scipy.absolute(n_13))/100

  eps_hfo2 = 24
  t0 = 2e-9
  C_hfo2 = const.epsilon_0*eps_hfo2/t0
  c0 = 10**-7*1000
  # print(C_hfo2*100)

  def cal_V_2D(sigma, mater):
      # Return array-like V_2D
      # C_2D = numpy.array([f_C_2D(s, mater) for s in sigma])
      V_2D_ = []
      for s in sigma:
          if s is 0:
              V_2D_.append(0)
          else:
              ss = numpy.linspace(1e-5*s, s, 100)
              C_2D_ = numpy.array([f_C_2D(s_, mater) for s_ in ss])
              V_2D_.append(trapz(1/C_2D_, ss))
      V_2D_ = numpy.array(V_2D_)
      # V_2D_ = cumtrapz(1/(C_2D), sigma, initial=0)
      # pos_0 = numpy.argmin(numpy.absolute(sigma))  # The minimal sigma close to 0
      # V_2D_ = V_2D_ - V_2D_[pos_0]
      V_ox = sigma/C_hfo2
      return V_2D_ + V_ox

  def plot_dcos_all(fig):
      ax = fig.add_subplot(111)
      n_e = numpy.linspace(-10, 10, 201)
      sigma_e = n_e*10**13*10**4*const.e

      for m in ["Gr", "Si", "Ge", "MoS2", "MoTe2", "WS2", "WTe2"]:
          V = cal_V_2D(sigma_e, m)
          dcos = cal_2D(c0, sigma_e)
          ax.plot(V, dcos, label=Materials[m]["name"])
      ax.set_xlabel(r"$V_{\mathrm{2D}}$ (V)")
      ax.set_ylabel(r"$\Delta\cos\theta$")
      ax.legend(loc=0, prop=dict(size="smaller"))
      ax.set_xlim(-2, 2)
      ax.set_ylim(0, 0.15)
      fig.tight_layout()

  if __name__ == "__main__":
      fc = FigureCollection(pagesize=(4.5, 2.5),
                            figure_style="science",
                            col=9, row=1)
      fig1, _ = fc.add_figure(loc=(0, 0, 4, 1),
                              fig_file="../img/scheme-2D-elw.pdf")
      fig2, _ = fc.add_figure(loc=(4, 0, 5, 1))
      fig2.set_plot_func(plot_dcos_all)
      org.figure(fc.save_all("../img/dcos-all-2D.pdf", outline=False),
		 attributes=[("latex", ":width 0.95\linewidth")],
		 label="fig:dcos-all-2D",
		 caption=("(a) Schematic illustration of the "
                          "2D-material-based electrowetting device. "
                          r"(b) $\Delta\cos\theta$ "
                          r"as a function of $V_{\mathrm{2D}}$ "
                          "for selected 2D materials."))
#+END_SRC

#+RESULTS: dcos-all-2D
:RESULTS:
#+CAPTION: (a) Schematic illustration of the 2D-material-based electrowetting device. (b) $\Delta\cos\theta$ as a function of $V_{\mathrm{2D}}$ for selected 2D materials.
#+LABEL: fig:dcos-all-2D
#+ATTR_latex: :width 0.95\linewidth
[[file:../img/dcos-all-2D.pdf]]
:END:

As expected in Eq. [[ref:eqn:beta]], at the same $V_{\mathrm{2D}}$ level,
the 2D TMDC semiconductors (MoS_2, MoTe_2, WS_2, WTe_2) exhibit a much
higher response $\Delta \cos \theta$ than 2D semimetals (silicene,
germanene and graphene). We can briefly rank the voltage tunability of
the selected 2D materials by their DOS: MoTe_2 > MoS_2 > WTe_2 > WS_2
> germanene > silicene > graphene. Notably, TMDCs can achieve a
$\Delta \Phi_{\mathrm{2D}}$ as high as 0.15 when
$V_{\mathrm{2D}}=\pm1.5$ V is applied, corresponding a contact angle
decrease at the magnitude of 10$^{\circ}$ when the intrinsic contact
angle is ca. 90$^{\circ}$.  A high-DOS 2D material further suppresses
electrochemical reactions at the solid-liquid interface, as less
electrochemical potential (i.e. the Fermi level $E_{\mathrm{F}}$) is
required. We conclude that a 2D material with higher DOS can
essentially reduced the voltage needed for doping, pushing
liquid-phase 2D-material-based devices to a more operational regime.


* Conclusion                                                         :ignore:

In conclusion, we propose a multiscale approach for modeling the
doping-induced tunable wettability of 2D materials, by combining the
reorientation effect of water molecules estimated by MD simulations,
and the electrowetting effect calculated by a continuum model. Taking
graphene as an example, we find that electrostatic interaction plays a
major role at both scales for the graphene-water interface. We further
show that, by considering the incomplete coverage of 2D material on
the substrate, it is possible to evaluate the recent findings of
doping-induced tuning of graphene's wettability with the proposed
model. We find that minor surface incompleteness can cause great
discrepancy in the measured value of interfacial wettability, and
extreme care should be taken to interpret the observed
electrowetting phenomena. In addition, we prove that a 2D material
with higher density of states can essentially reduce the gating
voltage in a 2D-material-based electrowetting device, and rank the
tunability of the 2D materials as: MoTe_2 > MoS_2 > WTe_2 > WS_2 >
germanene > silicene > graphene. Our multiscale analysis provides a
comprehensive view of the wettability of 2D material interface, and we
believe operational 2D-material-based liquid manipulating devices will
be facilitated by the principles presented in this letter.
* REFERENCES                                                         :ignore:
# Here 
[[bibliography:ref.bib]]
